import requests
import json
from geopy.distance import geodesic

# Constants for APIs
TRAFFIC_API_URL = "https://api.tomtom.com/traffic/services/4/flowSegmentData/absolute/10/json"
TRAFFIC_API_KEY = "your_tomtom_api_key"
WEATHER_API_URL = "http://api.weatherapi.com/v1/current.json"
WEATHER_API_KEY = "your_weather_api_key"

# Vehicle details
VEHICLE_DATA = {
    "fuel_efficiency_kmpl": 15,  # Example: 15 km per liter
    "fuel_type": "diesel",
    "emission_factor_g_per_km": 120  # CO2 emissions in grams per km
}

# Function to fetch traffic data
def get_traffic_data(lat, lon):
    try:
        params = {
            "key": TRAFFIC_API_KEY,
            "point": f"{lat},{lon}"
        }
        response = requests.get(TRAFFIC_API_URL, params=params)
        data = response.json()
        if response.status_code == 200:
            return data["flowSegmentData"]["currentSpeed"]
        else:
            print("Error fetching traffic data:", data)
            return None
    except Exception as e:
        print("Exception in fetching traffic data:", str(e))
        return None

# Function to fetch weather data
def get_weather_data(lat, lon):
    try:
        params = {
            "key": WEATHER_API_KEY,
            "q": f"{lat},{lon}"
        }
        response = requests.get(WEATHER_API_URL, params=params)
        data = response.json()
        if response.status_code == 200:
            return data["current"]["condition"]["text"], data["current"]["temp_c"]
        else:
            print("Error fetching weather data:", data)
            return None, None
    except Exception as e:
        print("Exception in fetching weather data:", str(e))
        return None, None

# Function to calculate route distance using geodesic
def calculate_distance(origin, destination):
    return geodesic(origin, destination).km

# Function to estimate emissions
def calculate_emissions(distance, vehicle_data):
    fuel_used = distance / vehicle_data["fuel_efficiency_kmpl"]
    emissions = fuel_used * vehicle_data["emission_factor_g_per_km"]
    return emissions

# Main function for route optimization
def optimize_route(origin, destination):
    # Step 1: Fetch traffic and weather data for both origin and destination
    traffic_speed_origin = get_traffic_data(*origin)
    traffic_speed_dest = get_traffic_data(*destination)
    weather_origin, temp_origin = get_weather_data(*origin)
    weather_dest, temp_dest = get_weather_data(*destination)

    # Step 2: Calculate distance
    distance = calculate_distance(origin, destination)

    # Step 3: Estimate emissions
    emissions = calculate_emissions(distance, VEHICLE_DATA)

    # Step 4: Print results
    print("Route Details:")
    print(f"Origin: {origin}, Weather: {weather_origin}, Temp: {temp_origin}°C, Traffic Speed: {traffic_speed_origin} km/h")
    print(f"Destination: {destination}, Weather: {weather_dest}, Temp: {temp_dest}°C, Traffic Speed: {traffic_speed_dest} km/h")
    print(f"Distance: {distance:.2f} km")
    print(f"Estimated Emissions: {emissions:.2f} grams")

# Example Usage
if __name__ == "__main__":
    origin_coords = (37.7749, -122.4194)  # Example: San Francisco
    destination_coords = (34.0522, -118.2437)  # Example: Los Angeles
    optimize_route(origin_coords, destination_coords)
